#!/usr/bin/env python3
"""
–£—Å—Ç–æ–π—á–∏–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ñ–∞–π–ª–æ–≤ –≤ —É—Å–ª–æ–≤–∏—è—Ö –ø—Ä–æ–±–ª–µ–º–Ω–æ–π —Å–µ—Ç–∏
"""

import requests
import base64
import os
import sys
from pathlib import Path
import json
import time
import urllib.parse

class RobustFileTransferClient:
    def __init__(self, server_url='http://193.222.99.46:8080'):
        self.server_url = server_url.rstrip('/')
        self.chunk_size = 512  # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ –∫—É—Å–∫–∏ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–π —Å–µ—Ç–∏
        self.max_retries = 5
        self.retry_delay = 2
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–π —Å–µ—Ç–∏
        self.session = requests.Session()
        self.session.headers.update({
            'Connection': 'close',  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            'User-Agent': 'FileTransfer/1.0'
        })
    
    def upload_file(self, file_path, show_progress=True):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        file_path = Path(file_path)
        
        if not file_path.exists():
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return False
        
        filename = file_path.name
        file_size = file_path.stat().st_size
        
        print(f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: {filename} ({file_size} –±–∞–π—Ç)")
        print(f"üîß –†–∞–∑–º–µ—Ä –∫—É—Å–∫–∞: {self.chunk_size} –±–∞–π—Ç")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ –∫—É—Å–∫–∏
        chunks = []
        with open(file_path, 'rb') as f:
            while True:
                chunk = f.read(self.chunk_size)
                if not chunk:
                    break
                chunks.append(chunk)
        
        total_chunks = len(chunks)
        print(f"üì¶ –í—Å–µ–≥–æ –∫—É—Å–∫–æ–≤: {total_chunks}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—É—Å–∫–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        successful_chunks = 0
        for i, chunk in enumerate(chunks):
            success = False
            for attempt in range(self.max_retries):
                if self._send_chunk_safe(filename, chunk, i, total_chunks, attempt + 1):
                    successful_chunks += 1
                    success = True
                    break
                else:
                    if attempt < self.max_retries - 1:
                        print(f"   ‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 2} —á–µ—Ä–µ–∑ {self.retry_delay} —Å–µ–∫...")
                        time.sleep(self.retry_delay)
            
            if not success:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—É—Å–æ–∫ {i + 1} –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                return False
            
            if show_progress and (i + 1) % 10 == 0:
                progress = ((i + 1) / total_chunks) * 100
                print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i + 1}/{total_chunks} ({progress:.1f}%)")
        
        print(f"‚úÖ –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! ({successful_chunks}/{total_chunks} –∫—É—Å–∫–æ–≤)")
        return True
    
    def _send_chunk_safe(self, filename, chunk_data, chunk_index, total_chunks, attempt):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫—É—Å–∫–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        try:
            # –ö–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ base64
            encoded_data = base64.b64encode(chunk_data).decode('utf-8')
            
            # –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            params = {
                'f': filename,  # –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                'd': encoded_data,
                'c': str(chunk_index),
                't': str(total_chunks),
                'end': '1' if chunk_index == total_chunks - 1 else '0'
            }
            
            # –ü—Ä–æ—Å—Ç–æ–π GET –∑–∞–ø—Ä–æ—Å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            url = f"{self.server_url}/upload"
            
            print(f"üîÑ –ö—É—Å–æ–∫ {chunk_index + 1}/{total_chunks} (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")
            
            # –û—á–µ–Ω—å –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            response = requests.get(
                url, 
                params=params, 
                timeout=10,
                headers={'Connection': 'close'}
            )
            
            if response.status_code == 200:
                print(f"   ‚úì –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return True
            else:
                print(f"   ‚úó –û—à–∏–±–∫–∞ {response.status_code}")
                return False
                
        except requests.exceptions.Timeout:
            print(f"   ‚è∞ –¢–∞–π–º–∞—É—Ç")
            return False
        except requests.exceptions.ConnectionError:
            print(f"   üîå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
            return False
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_connection_simple(self):
        """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {self.server_url}")
            response = requests.get(
                f"{self.server_url}/", 
                timeout=5,
                headers={'Connection': 'close'}
            )
            if response.status_code == 200:
                print("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç")
                return True
            else:
                print(f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
            return False
    
    def send_test_data(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        test_data = b"Hello World Test"
        encoded = base64.b64encode(test_data).decode('utf-8')
        
        try:
            params = {
                'f': 'test.txt',
                'd': encoded,
                'c': '0',
                't': '1',
                'end': '1'
            }
            
            response = requests.get(
                f"{self.server_url}/upload",
                params=params,
                timeout=10,
                headers={'Connection': 'close'}
            )
            
            if response.status_code == 200:
                print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–∞")
                return True
            else:
                print(f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {str(e)}")
            return False

def main():
    if len(sys.argv) < 2:
        print("üöÄ –£—Å—Ç–æ–π—á–∏–≤—ã–π File Transfer Client")
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print(f"  {sys.argv[0]} <—Ñ–∞–π–ª> [—Å–µ—Ä–≤–µ—Ä]")
        print(f"  {sys.argv[0]} --test [—Å–µ—Ä–≤–µ—Ä]")
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print(f"  {sys.argv[0]} document.txt")
        print(f"  {sys.argv[0]} --test http://192.168.1.100:8080")
        return
    
    server_url = 'http://localhost:8080'
    if len(sys.argv) > 2:
        server_url = sys.argv[2]
    
    client = RobustFileTransferClient(server_url)
    
    if sys.argv[1] == '--test':
        print("üß™ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–µ—Ç–∏...")
        client.test_connection_simple()
        print("üì§ –¢–µ—Å—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö...")
        client.send_test_data()
    else:
        file_path = sys.argv[1]
        print("üîß –†–µ–∂–∏–º –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–π —Å–µ—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        
        if client.test_connection_simple():
            print()
            start_time = time.time()
            success = client.upload_file(file_path)
            end_time = time.time()
            
            if success:
                print(f"‚è±Ô∏è –í—Ä–µ–º—è: {end_time - start_time:.1f} —Å–µ–∫")
        else:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

if __name__ == '__main__':
    main()
